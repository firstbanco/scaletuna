#!/usr/bin/env ruby

require "curses"
include Curses
require "aws-sdk-autoscaling"

Q = Queue.new

I = []

def quit(message = nil, code = 0)
  close_screen
  $stderr.puts message if message
  exit code
end

begin
  C = Aws::AutoScaling::Client.new
  F = /#{ARGV[0] || ENV['SCALETUNA_FILTER'] || "."}/i
rescue Exception => ex
  quit("Error: #{ex}", -1)
end

asg_update_thread = Thread.new do
  begin
    loop do
      asgs = C.describe_auto_scaling_groups.auto_scaling_groups.select { |a|
        a.auto_scaling_group_name[F]
      }

      Q << { type: :asg_update, data: asgs }
      sleep 2
    end
  rescue Exception => ex
    quit("Error: #{ex}", -1)
  end
end

def message(msg, showinlog = true)
  setpos(lines - 1, 0)
  clrtoeol
  addstr msg
  I << msg if showinlog
  refresh
end

def update_screen(asgs, selected)
  setpos(0, 0)
  clrtoeol
  addstr "min     max     desired current name      updated: #{Time.now}"

  asgs.each_with_index do |e, i|
    setpos(i + 1, 0)
    clrtoeol

    [
      e.min_size,
      e.max_size,
      e.desired_capacity,
      e.instances.length,
      e.auto_scaling_group_name
    ].each_with_index do |v, j|
      (i == selected.first && j == selected.last) && attron(A_BOLD) || attroff(A_BOLD)
      (i == selected.first || j == selected.last) && attron(A_REVERSE) || attroff(A_REVERSE)
      setpos(i + 1, j * 8)
      addstr v.to_s[0...cols - j * 8]
    end
  end

  setpos(selected.first + 1, selected.last * 8)
  attroff A_BOLD
  refresh
end

init_screen
begin
  crmode
  noecho
  selected = [0, 2]
  stdscr.keypad = true
  # Assumes the first event will be of type :asg_update
  asgs = Q.pop.fetch(:data)
  update_screen(asgs, selected)

  blocking_keypress_thread = Thread.new do
    loop do
      stdscr.timeout = -1 # blocking

      ch = stdscr.getch

      Q << { type: :keypress, data: ch }
    end
  end

  enteringnumber = ""

  loop do
    event = Q.pop

    change = 0
    force_set = nil

    case event.fetch(:type)
    when :keypress
      ch = event.fetch(:data)
      case ch
      when KEY_UP
        selected[0] = [selected[0] - 1, 0].max
      when KEY_DOWN
        selected[0] = [selected[0] + 1, asgs.length - 1].min
      when KEY_LEFT
        selected[1] = [selected[1] - 1, 0].max
      when KEY_RIGHT
        selected[1] = [selected[1] + 1, 2].min
      when "+"
        change = +1
      when "-"
        change = -1
      when KEY_BACKSPACE
        enteringnumber = enteringnumber[0..-2]
        message("##{enteringnumber}", false)
      when /[0-9]/
        enteringnumber += ch.to_s
        message("##{enteringnumber}", false)
      when KEY_ENTER, "\n".ord, "\r".ord
        if enteringnumber.size > 0
          force_set = enteringnumber.to_i
        end
        enteringnumber = ""
      when "q"
        quit((I << "Exited normally").join("\n"))
      else
        message("#{ch} not mapped (+,- to increase or decrease, and move with arrows)", false)
      end
    when :asg_update
      asgs = event.fetch(:data)
    end

    begin
      selection = asgs[selected[0]]

      if change != 0 || !force_set.nil?
        name = selection.auto_scaling_group_name

        case selected[1]
        when 2 # desired_capacity
          new = force_set || selection.desired_capacity + change
          message "Setting desired capacity of #{name} to #{new}"
          C.set_desired_capacity(auto_scaling_group_name:
                                 selection.auto_scaling_group_name,
                                 desired_capacity: new,
                                 honor_cooldown: false)
          selection.desired_capacity = new
        when 0 # min_size
          new = force_set || selection.min_size + change
          message "Setting min size of #{name} to #{new}"
          C.update_auto_scaling_group(auto_scaling_group_name:
                                      selection.auto_scaling_group_name,
                                      min_size: new
                                     )
          selection.min_size = new
        when 1 # max_size
          new = force_set || selection.max_size + change
          message "Setting max size of #{name} to #{new}"
          C.update_auto_scaling_group(auto_scaling_group_name:
                                      selection.auto_scaling_group_name,
                                      max_size: new
                                     )
          selection.max_size = new
        end
      end
    rescue Aws::AutoScaling::Errors::ValidationError => err
      message "Error: #{err}"
    end

    update_screen(asgs, selected)
  end
rescue Interrupt
  quit("Ctrl-c", 130)
ensure
  Thread.kill(blocking_keypress_thread)
  Thread.kill(asg_update_thread)

  close_screen
end
